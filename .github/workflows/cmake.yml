name: CMake

on: [push]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/checkout@v3
        with:
          path: llvm
          repository: llvm/llvm-project
          ref: refs/tags/llvmorg-16.0.0

      - uses: actions/cache/restore@v3
        id: cache
        with:
          path: llvm/build
          key: ${{ runner.os }}-llvmorg-16.0.0

      - name: Patch LLVM
        if: steps.cache.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          dir
          git -C llvm apply ../llvm-debuginfo.patch

      - name: Initialize LLVM
        if: steps.cache.outputs.cache-hit != 'true'
        shell: cmd
        run: cmake -B llvm/build -S llvm/llvm

      - name: Build LLVM
        if: steps.cache.outputs.cache-hit != 'true'
        shell: cmd
        run: cmake --build llvm/build --target llvm-pdbutil  --config Release

      - uses: actions/cache/save@v3
        with:
          path: llvm/build
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Build PDBGen
        shell: cmd
        run: |
          cmake -B build -S core -DLLVM_DIR=../llvm/build/lib/cmake/llvm
          cmake --build build --config Release

      - name: Organise Assets
        run: |
          mkdir assets
          copy build/Release/pdbgen.exe assets
          copy ghidra/PdbGen.java assets

      - uses: actions/upload-artifact@v4
        with:
          name: pdbgen
          path: assets/*

      - run: tar -acvf assets.zip assets/*
        if: startsWith(github.ref, 'refs/tags/v')

      - name: Create Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        id: upload-release-asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./assets.zip
          asset_name: pdbgen.zip
          asset_content_type: application/zip
